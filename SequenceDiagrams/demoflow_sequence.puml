@startuml Demoflow Sequence

actor "User" as User
participant "Demoflow.py" as Demoflow
participant "Party API" as PartyAPI
participant "Loan API" as LoanAPI
participant "Kafka\n(Event Hub)" as Kafka
participant "Customer\nArrangements API" as ArrangementsAPI

title Modular Banking Demo Flow

== Customer Creation (Step 1) ==

User -> Demoflow: Start demo flow
activate Demoflow

Demoflow -> Demoflow: Generate randomized\ncustomer payload
Demoflow -> PartyAPI: POST /api/v5.0.0/party/parties
activate PartyAPI
note right: Create customer with\nrandomized data
PartyAPI --> Demoflow: Response with customer ID
deactivate PartyAPI
Demoflow -> Demoflow: Extract customer ID

== Loan Creation (Step 2) ==

Demoflow -> Demoflow: Generate randomized\nloan payload with customer ID
Demoflow -> LoanAPI: POST /api/v8.0.0/holdings/loans/consumerLoans
activate LoanAPI
note right: Create loan with\npartyId, amount, term
LoanAPI --> Demoflow: Response with loan ID (header.id)
deactivate LoanAPI
Demoflow -> Demoflow: Extract loan ID and aaaId

== Kafka Events After Loan Creation (Step 3) ==

Demoflow -> Kafka: Connect and consume
activate Kafka
note right: Capture last 5 events\nafter loan creation
Kafka --> Demoflow: Return 5 latest events
deactivate Kafka
Demoflow -> Demoflow: Log Kafka events to file

== Loan Status (Step 4) ==

Demoflow -> LoanAPI: GET /api/v8.0.0/holdings/loans/{loan_id}/status
activate LoanAPI
LoanAPI --> Demoflow: Loan status response
deactivate LoanAPI
Demoflow -> Demoflow: Log loan status to file

== Loan Schedules (Step 5) ==

Demoflow -> LoanAPI: GET /api/v8.0.0/holdings/loans/{loan_id}/schedules
activate LoanAPI
LoanAPI --> Demoflow: Loan schedules response
deactivate LoanAPI
Demoflow -> Demoflow: Log loan schedules to file

== Loan Disbursement (Step 6) ==

Demoflow -> Demoflow: Calculate 80% of loan amount
Demoflow -> Demoflow: Format today's date as YYYYMMDD
Demoflow -> LoanAPI: PUT /api/v8.0.0/holdings/loans/{loan_id}/disbursements
activate LoanAPI
note right: Disburse loan with 80%\nof original amount
LoanAPI --> Demoflow: Disbursement response
deactivate LoanAPI
Demoflow -> Demoflow: Log disbursement to file

== Kafka Events After Disbursement (Step 7) ==

Demoflow -> Kafka: Connect and consume
activate Kafka
note right: Capture last 13 events\nafter disbursement
Kafka --> Demoflow: Return 13 latest events
deactivate Kafka
Demoflow -> Demoflow: Log Kafka events to file

== Customer Arrangements (Step 8) ==

Demoflow -> ArrangementsAPI: GET /api/v7.0.0/holdings/customers/{customer_id}/arrangements
activate ArrangementsAPI
ArrangementsAPI --> Demoflow: Customer arrangements response
deactivate ArrangementsAPI
Demoflow -> Demoflow: Log arrangements to file

Demoflow --> User: Demo flow completed
deactivate Demoflow

@enduml 